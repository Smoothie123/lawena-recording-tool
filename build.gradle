import net.researchgate.release.GitAdapter
import org.ajoberstar.grgit.Grgit
import org.apache.tools.ant.taskdefs.condition.Os

import java.text.Collator

buildscript {
    ext {
        springBootVersion = '1.3.1.RELEASE'
    }
    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
        classpath 'org.ajoberstar:grgit:1.4.1'
    }
}

plugins {
    id 'net.researchgate.release' version '2.3.4'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'propdeps'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'distribution'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter'
    optional 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'org.controlsfx:controlsfx:8.40.10'
    compile 'org.pegdown:pegdown:1.6.0'
    compile 'com.threerings:getdown:1.5'
    compile 'com.jcabi:jcabi-manifests:1.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
    compile 'com.github.spullara.mustache.java:compiler:0.9.1'
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.1.1.201511131810-r'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

release {
    failOnPublishNeeded = false
    preTagCommitMessage = 'Prepare for release:'
    tagCommitMessage = 'Creating release tag:'
    newVersionCommitMessage = 'Prepare for next development iteration:'
    versionPropertyFile = 'gradle.properties'
    buildTasks = ['bootRepackage']
    scmAdapters = [GitAdapter]
    git {
        requireBranch = ''
        pushToRemote = ''
    }
}

sourceSets {
    main {
        resources {
            exclude '**/*.db'
        }
    }
}

def git = Grgit.open()
def buildTime = new Date().format("yyyyMMddHHmmss")
def describe = git?.describe()
def commit = git?.head()?.getAbbreviatedId(7)

jar {
    archiveName = 'lawena.jar'
    destinationDir = null
    entryCompression = ZipEntryCompression.STORED
    manifest {
        attributes(
                'Implementation-Title': 'Lawena Recording Tool',
                'Implementation-Version': version,
                'Implementation-Build': buildTime,
                'Git-Describe': describe ?: version,
                'Git-Commit': commit ?: '0000000'
        )
    }
}

bootRun {
    jvmArgs = ["-Djavafx.preloader=com.github.lawena.LawenaPreloader"]
}

compileJava.dependsOn(processResources)
bootRepackage.withJarTask = jar

distributions {
    stable {
        contents {
            from { ['src/dist', 'getdown/stable'] }
            exclude "**/getdown.*.txt"
            duplicatesStrategy = 'exclude'
        }
    }
    preview {
        contents {
            from { ['src/dist', 'getdown/preview'] }
            exclude "**/getdown.*.txt"
            duplicatesStrategy = 'exclude'
        }
    }
}

task buildLauncher {
    inputs.file 'launcher/lawena-launcher.xml'
    outputs.file 'launcher/lawena.exe'
    doLast {
        exec {
            workingDir 'launcher'
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', launch4jPath, 'lawena-launcher.xml'
            } else {
                commandLine launch4jPath, 'lawena-launcher.xml'
            }
        }
    }
}

task copyLauncher(type: Copy, dependsOn: 'buildLauncher') {
    from 'launcher/lawena.exe'
    into 'src/dist'
}

task copyLauncherNew(type: Copy, dependsOn: 'copyLauncher') {
    from 'launcher/lawena.exe'
    into 'src/dist/lawena/code'
    rename 'lawena.exe', 'lawena-new.exe'
}

task copyGetdownClient(type: Copy, dependsOn: 'copyLauncherNew') {
    from 'launcher/getdown-client.jar'
    into 'src/dist/lawena'
}

task copyGetdownClientNew(type: Copy, dependsOn: 'copyGetdownClient') {
    from 'launcher/getdown-client.jar'
    into 'src/dist/lawena/code'
    rename 'getdown-client.jar', 'getdown-client-new.jar'
}

task copyMainJar(type: Copy, dependsOn: 'bootRepackage') {
    from 'lawena.jar'
    into 'src/dist/lawena'
}

task copyLibs(dependsOn: ['copyGetdownClientNew', 'copyMainJar']) {}

task packResources(type: Zip) {
    archiveName = 'lwrtresources.jar'
    destinationDir = file('src/dist/lawena')
    from projectDir
    includes = ['lwrt/**/config/**', 'lwrt/**/hud/**']
}

task packVpks(type: Zip) {
    archiveName = 'lwrtvpks.jar'
    destinationDir = file('src/dist/lawena')
    from projectDir
    includes = ['lwrt/**/custom/**', 'lwrt/**/default/**']
}

task packWinBatches(type: Zip) {
    archiveName = 'lwrtwinstuff.jar'
    destinationDir = file('src/dist/lawena')
    from projectDir
    includes = ['lwrt/tools/**']
}

task packSkyboxes(type: Zip) {
    archiveName = 'skybox.jar'
    destinationDir = file('src/dist/lawena')
    from projectDir
    includes = ['lwrt/**/skybox/**']
    excludes = ['**/*.db']
}

task pack(dependsOn: ['packResources', 'packVpks', 'packWinBatches', 'packSkyboxes']) {}

['stable', 'preview'].each { def distName ->
    def DistName = distName.capitalize()
    def latestFolder = 'latest'
    tasks.create(name: "setup${DistName}Dist", dependsOn: ['copyLibs', 'pack']) {
        description "Prepares deployment descriptor for packaging ${distName} distribution"
        def min = file("getdown/${distName}/lawena/getdown.min.txt")
        def getdown = file("getdown/${distName}/lawena/getdown.txt")
        inputs.file min
        outputs.file getdown
        getdown.getParentFile().mkdirs()
        getdown.withWriter { w ->
            min.eachLine { line ->
                w << line.replaceAll('<version>', buildTime).replaceAll('<channel>', distName) + System.getProperty("line.separator")
            }
        }
    }

    tasks.create(name: "build${DistName}Dist", dependsOn: ["setup${DistName}Dist", "${distName}DistZip"]) {}

    tasks.create(name: "setup${DistName}Deploy", dependsOn: ["build${DistName}Dist"/*, "cleanInstall${DistName}Dist"*/, "install${DistName}Dist"]) {
        description "Prepares deployment descriptor for deploying ${distName} distribution"
        def base = file("getdown/${distName}/lawena/getdown.base.txt")
        def getdown = file("getdown/${distName}/lawena/getdown.full.txt")
        inputs.file base
        outputs.file getdown
        getdown.getParentFile().mkdirs()
        getdown.withWriter { w ->
            base.eachLine { line ->
                w << line.replaceAll('<version>', buildTime).replaceAll('<channel>', distName) + System.getProperty("line.separator")
            }
        }
    }

    tasks.create(name: "deploy${DistName}", dependsOn: ["setup${DistName}Deploy"/*, "cleanInstall${DistName}Dist", "install${DistName}Dist"*/]) {
        description "Deploys ${distName} distribution to a local directory"
        doLast {
            def sourceTree = fileTree("build/install/lawena-${distName}/lawena")
            def stampDestFile = file("${deployDir}/${distName}/${buildTime}")
            def latestDestFile = file("${deployDir}/${distName}/${latestFolder}")
            copy {
                from sourceTree
                into stampDestFile
            }
            copy {
                from file("getdown/${distName}/lawena/getdown.full.txt")
                into file("${deployDir}/${distName}/${buildTime}")
                rename "getdown.full.txt", "getdown.txt"
            }
            javaexec {
                main 'com.threerings.getdown.tools.Digester'
                classpath 'launcher/getdown-client.jar'
                args = [stampDestFile]
            }
            copy {
                from sourceTree
                into latestDestFile
            }
            copy {
                from file("getdown/${distName}/lawena/getdown.full.txt")
                into file("${deployDir}/${distName}/${latestFolder}")
                rename "getdown.full.txt", "getdown.txt"
            }
            javaexec {
                main 'com.threerings.getdown.tools.Digester'
                classpath 'launcher/getdown-client.jar'
                args = [latestDestFile]
            }
            def output = file("${deployDir}/${distName}/buildlist.txt")
            output.append "${buildTime};${version};${describe}\n"
            // post to webhook about new build
            //"curl --data-urlencode \"message=New version pushed to **${distName}** updater branch: *${version}* (${commit})\" ${notifyUrl}".execute()
        }
    }

    tasks.create(name: "diffDeploy${DistName}", dependsOn: "deploy${DistName}") {
        description "Deploys and creates diff patch files for ${distName} distribution"
        doLast {
            def buildlist = []
            file("${deployDir}/${distName}").eachDirMatch(~/^[0-9]+$/) { dir ->
                buildlist.add dir.name
            }
            buildlist.sort(Collator.instance)
            def latest = buildlist[buildlist.size() - 1]
            buildlist = buildlist - latest
            buildlist.each { s ->
                println "Creating diff between ${s} and latest build ${latest}"
                javaexec {
                    main 'com.threerings.getdown.tools.Differ'
                    classpath 'launcher/getdown-client.jar'
                    args = ['-verbose', file("${deployDir}/${distName}/${latest}"), file("${deployDir}/${distName}/${s}")]
                }
            }
        }
    }
}
